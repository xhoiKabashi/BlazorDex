@page "/Shooter"
@using BlazorDex.Models
@inject NavigationManager NavigationManager




@if (!gameAccepted)
{
   <CardOfEnemy  OnClick="AcceptGame"  AbilityDesc="Blocks your abilities"   OnClickNavigate="GoStory"  Story="@Story" Armor="@_enemy.Armor" Hp="@_enemy.Hp"  Speed="@_enemy.Speed" Weakness="None"  Name="@_enemy.Name"  Dmg="@_enemy.Dmg"/>
}
else {

<Action 
    SceneUrl="@_enemy.SceneUrl" 
    AttackUrl="@_enemy.AttackUrl" 
    StandUrl="@_enemy.StandUrl" 

    EnemyHp="@_enemy.Hp"
    EnemySpeed="@_enemy.Speed"
    EnemyArmor="@_enemy.Armor"
    EnemyDmg="@_enemy.Dmg"
    IconUrl="@_enemy.IconUrl"
    EnemyName="@_enemy.Name"
    PointsProvided="@_enemy.PointsProvided"
    ExperienceProvided="@_enemy.ExperienceProvided"
    NumberOfSpells="@_enemy.NumberOfSpells"
    specialAbilityShooter="EnemyAttack"
    enemyAbilities="enemyAbilities" 
    ChapterNumber="Shooter"
    EnemyLevel="11"
    AbilityNotLocked="false"


/>
 <audio id="audio" src="audio/bow.mp3"></audio>
}

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    private Enemy _enemy = new Enemy(
        hp: 520,
        speed: 110,
        armor: 100,
        dmg: 200,
        name: "Genovesi",
        sceneUrl: "image/scenes/acher.jpg",
        attackUrl: "image/motion/shooterAttack.png",
        standUrl: "image/motion/shooterStand.png",
        defendUrl: null,
        boostUrl: null,
        iconUrl: "image/icons/crossbow.png",
        experienceProvided: 500,
        pointsProvided : 20,
        numberOfSpells: 1,
        healUrl: null
    );

    private bool gameAccepted { get; set; } = false;

    private void AcceptGame()
    {
        gameAccepted = true;
    }

    private void GoStory() => NavigationManager.NavigateTo("/Story");
    private string Story = "Brother, the enemy didn’t just bring a big army—they had a Genoese crossbowman with them. This one mercenary, famous for his deadly aim, was all it took to break our defenses. Even though our men fought bravely, his arrows hit their targets every time. Because of him, we lost our last castle. We can’t undo what’s happened, but we have to get ready for the next battle.";
    private List<string> enemyAbilities = new List<string> { "SpecialAbility" };



    private async Task<(int heroHp, int damageDealt, bool isMonster, int heroDmg)> EnemyAttack(int heroArmor, int heroHp, int enemyDmg, int heroDmg)
{   
    await PlayMonsterAttack();
    bool isMonster = false;
    int damageDealt = Math.Max(enemyDmg - heroArmor, 0);
    heroHp -= damageDealt;
    return (heroHp, damageDealt,isMonster, heroDmg); // Return the updated hero's HP and damage dealt
}
private async Task PlayMonsterAttack()
{
    await JSRuntime.InvokeVoidAsync("eval", @"
        const audio = document.getElementById('audio'); audio.volume = 0.3; audio.play()");
}
}
