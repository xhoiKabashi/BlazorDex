@page "/ChapterOne"
@using BlazorDex.Models
@inject NavigationManager NavigationManager



@if (!gameAccepted)
{
   <CardOfEnemy  OnClick="AcceptGame"  AbilityDesc=" None"   OnClickNavigate="GoStory"  Story="@Story" Armor="@_enemy.Armor" Hp="@_enemy.Hp"  Speed="@_enemy.Speed" Weakness="High Speed"  Name="@_enemy.Name"  Dmg="@_enemy.Dmg"/>
}
else {
<Action 
    SceneUrl="@_enemy.SceneUrl" 
    AttackUrl="@_enemy.AttackUrl" 
    StandUrl="@_enemy.StandUrl" 

    EnemyHp="@_enemy.Hp"
    EnemySpeed="@_enemy.Speed"
    EnemyArmor="@_enemy.Armor"
    EnemyDmg="@_enemy.Dmg"
    IconUrl="@_enemy.IconUrl"
    EnemyName="@_enemy.Name"
    PointsProvided="@_enemy.PointsProvided"
    ExperienceProvided="@_enemy.ExperienceProvided"
    NumberOfSpells="@_enemy.NumberOfSpells"
    EnemyAttack="EnemyAttack"
    enemyAbilities="enemyAbilities" 
    ChapterNumber="Chapter1"
    EnemyLevel="2"


/>
}

@code {
    private Enemy _enemy = new Enemy(
        hp: 1,
        speed: 12,
        armor: 0,
        dmg: 1,
        name: "Black Wolf",
        sceneUrl: "image/scenes/chapterOne.jpg",
        attackUrl: "image/motion/wolfattk.png",
        standUrl: "image/motion/wolfstand.png",
        defendUrl: null,
        boostUrl: null,
        iconUrl: "image/icons/wolf.png",
        experienceProvided: 50,
        pointsProvided : 5,
        numberOfSpells: 1,
        healUrl: "healUrl"
    );
    private bool gameAccepted { get; set; } = false;

    private void AcceptGame()
    {
        gameAccepted = true;
    }

    private void GoStory() => NavigationManager.NavigateTo("/Story");
    private string Story = "Brother, dark news has reached our ears. A direwolf, swift as the mountain winds, has been terrorizing the villages. The elders say it moves so fast that the eye can barely track it, leaving only fear and destruction in its wake.";
    private List<string> enemyAbilities = new List<string> { "Attack" };



    private async Task<(int heroHp, int damageDealt, bool isMonster)> EnemyAttack(int heroArmor, int heroHp, int enemyDmg)
{   
    await Task.Delay(10);
    bool isMonster = true;
    int damageDealt = Math.Max(enemyDmg - heroArmor, 0);
    heroHp -= damageDealt;
    return (heroHp, damageDealt,isMonster); // Return the updated hero's HP and damage dealt
}
}
