@page "/"
@using BlazorDex.Models
@using BlazorDex.Util
@using System.Text.Json
@using System.Text
@inject HeroStateService HeroStateService
@inject HeroClient HeroClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<div class="flex flex-col  justify-center items-center min-h-[calc(100dvh)]  w-full  text-text-third bg-cover bg-center px-4 uppercase " style="background-image: url('image/login1.png');">
    <div class=" p-6 rounded-lg shadow-lg max-w-sm w-full"  style="background-color: rgba(255, 249, 249, 0.1);" >
        <h2 class="text-5xl font-extrabold text-text-third  text-center mb-20">Kreshnik</h2>
        <div class="mb-4">
            <label for="playerName" class="block  font-semibold mb-2">name:</label>
            <input @bind="playerName" id="playerName" type="text" class="w-full px-4 py-2 border rounded-lg text-text-third bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-yellow-400" />
        </div>
        <div class="mb-6">
            <label for="password" class="block  font-semibold mb-2">PIN:</label>
            <input @bind="password" id="password" type="password" class="w-full px-4 py-2 border rounded-lg text-text-third bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-yellow-400" />
        </div>
        <button @onclick="FetchOrCreateHero" class="w-full bg-yellow-500 hover:bg-yellow-600 text-yellow-100 font-bold py-2 px-4  uppercase rounded-lg transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-yellow-700">
            Start
        </button>
        @if (errorMessage != null)
        {
            <p class="text-red-600 mt-4 text-cente uppercase">@errorMessage</p>
        }
    </div>
</div>

@code {
    private string? playerName;
    private string? password;
    private string? errorMessage;

    private async Task FetchOrCreateHero()
    {
        errorMessage = null;
         
        await JSRuntime.InvokeVoidAsync("toggleFullScreen");

        try
        {
            // Create the login request object
            var loginRequest = new HeroLoginRequest
                {
                    PlayerName = playerName,
                    Password = password
                };

            // Serialize the login request
            var requestContent = new StringContent(JsonSerializer.Serialize(loginRequest), Encoding.UTF8, "application/json");

            // Send the request to the API
            @* var response = await HeroClient.Client.PostAsync("http://localhost:5024/api/heroes/fetchorcreate", requestContent); *@
            var response = await HeroClient.Client.PostAsync("https://kreshnik-api.onrender.com/api/heroes/fetchorcreate", requestContent);


            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Failed to fetch or create hero.");
            }

            // Deserialize the hero from the response
            var heroJson = await response.Content.ReadAsStringAsync();
            var hero = JsonSerializer.Deserialize<Hero>(heroJson, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

            // Set the hero in the HeroStateService
            if(hero == null)
               return;
            HeroStateService.SetHero(hero);

            // Navigate to the game page (or any other page)
            NavigationManager.NavigateTo("/game");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
