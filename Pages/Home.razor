@page "/game"
@using BlazorDex.Models
@using BlazorDex.Util

@inject HeroClient client
@inject NavigationManager NavigationManager
@inject HeroStateService HeroStateService

<PageTitle>Home</PageTitle>

<div class="w-full min-h-screen flex flex-col justify-between items-center bg-cover bg-center " style="background-image: url('image/login.jpg');">
    @if (HeroStateService.Hero != null)
    {
        <LevelPoints Level="@HeroStateService.Hero.Level" Points="@HeroStateService.Hero.Points" />

        <StatsSection />

        <div class="mb-4 flex flex-col justify-center items-center z-0">
            <img src="image/hero/hero.png" class="h-68" alt="hero" />

            <div class="flex items-baseline w-48 h-8 bg-gray-800 border-2 border-white rounded-md p-1">
                <div class="bg-red-700 text-white px-2">HP:</div>
                <div class="bg-red-700 text-white flex-1 rounded-r-md pl-2">@HeroStateService.Hero.Hp</div>
            </div>

            <!-- Progress Bar -->
            <div class="relative w-48 h-5 bg-gray-700 border-2 border-white rounded-md mt-2">
                <div class="absolute bg-yellow-500 h-full rounded-l-md"
                    style="width: @(Math.Min((HeroStateService.Hero.Exp / (double)HeroStateService.Hero.ExpThreshold) * 100, 100))%">
                </div>
                <div class="absolute inset-0 flex items-center justify-center text-white text-xs px-1">
                    <p>@HeroStateService.Hero.Exp XP</p> / <p>@HeroStateService.Hero.ExpThreshold XP</p>
                </div>
            </div>
        </div>

        <NavButtons OnClick="GoShop">
            <img src="image/store.png" class="h-8" alt="store" />
        </NavButtons>

        <NavigationBar />

        @if (showLevelUpToast)
        {
            <div class="fixed bottom-5 right-5 bg-green-500 text-white p-4 rounded-md shadow-md">
                <p>Level Up!</p>
                <p>HP Increased by @hpIncrease</p>
                <p>Damage Increased by @dmgIncrease</p>
                <button @onclick="CloseToast" class="mt-2 text-sm underline">Close</button>
            </div>
        }
    }
    else
    {
        <p class="text-white text-xl">Failed to load Hero data.</p>
    }
</div>

@code {
    private bool isLoading = true;
    private Hero hero;
    private bool showLevelUpToast = false;
    private int hpIncrease;
    private int dmgIncrease;

    protected override async Task OnInitializedAsync()
    {
        HeroStateService.OnChange += StateHasChanged;

        if (HeroStateService.Hero != null)
        {
            CheckForLevelUp();
        }
    }

    private void CheckForLevelUp()
    {
        if (HeroStateService.Hero.Exp >= HeroStateService.Hero.ExpThreshold)
        {
            LevelUpHero();
        }
    }

    private void LevelUpHero()
    {
        // Increase the level
        HeroStateService.Hero.Level++;
        
        // Increase HP and Damage (customize these as needed)
        hpIncrease = 10; // Example increment
        dmgIncrease = 5;  // Example increment
        HeroStateService.Hero.Hp += hpIncrease;
        HeroStateService.Hero.Dmg += dmgIncrease;

        // Set experience to the difference beyond the threshold
        HeroStateService.Hero.Exp = HeroStateService.Hero.Exp - HeroStateService.Hero.ExpThreshold;

        // Increase the experience threshold for the next level
        HeroStateService.Hero.ExpThreshold = (int)(HeroStateService.Hero.ExpThreshold * 1.5);

        // Show the level-up toast notification
        showLevelUpToast = true;

        // Update the hero data on the server if needed
        // await client.UpdateHero(HeroStateService.Hero);

        // Trigger UI update
        StateHasChanged();
    }

    private void CloseToast()
    {
        showLevelUpToast = false;
    }

    private void GoShop() => NavigationManager.NavigateTo("/one");
}
