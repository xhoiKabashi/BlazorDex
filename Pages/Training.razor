        @page "/training"
        @using BlazorDex.Models
        @using BlazorDex.Components
        @inject NavigationManager NavigationManager
        @inject GameAnimationService AnimationService
        @inject GameLogic gameLogic
        @inject HeroStateService HeroStateService
        @inject IJSRuntime JSRuntime





        @if (!gameAccepted){
        <CardOfEnemy  OnClick="AcceptGame"   AbilityDesc=" Boost Armor "  OnClickNavigate="GoHome"  Story="@Story" Armor="@_enemy.Armor" Hp="@_enemy.Hp"  Speed="@_enemy.Speed" Weakness="None"  Name="Ymer AgÃ« Ulqini"  Dmg="@_enemy.Dmg"/>

        } else {
            <Action 
            SceneUrl="@_enemy.SceneUrl" 
            AttackUrl="@_enemy.AttackUrl" 
            StandUrl="@_enemy.StandUrl" 
            DefendUrl="@_enemy.DefendUrl"  
            BoostUrl="@_enemy.BoostUrl"
            HealUrl="@_enemy.HealUrl"

            EnemyHp="@_enemy.Hp"
            EnemySpeed="@_enemy.Speed"
            EnemyArmor="@_enemy.Armor"
            EnemyDmg="@_enemy.Dmg"
            IconUrl="@_enemy.IconUrl"
            ExperienceProvided="@_enemy.ExperienceProvided"
            PointsProvided="@_enemy.PointsProvided"
            EnemyName="@_enemy.Name"
            NumberOfSpells="@_enemy.NumberOfSpells"
            EnemyAttack="EnemyAttack"
            EnemyUpgradeArmor="@EnemyUpgradeArmor"
            enemyAbilities="enemyAbilities" 
            ChapterNumber="Training"
            EnemyLevel="HeroStateService.Hero.Level"
  
        />
        }

        @code {
            private Enemy _enemy = new Enemy(
                hp: 100,
                speed: 5,
                armor: 4,
                dmg: 22,
                name: "Ulqin",
                sceneUrl: "image/scenes/training.jpg",
                attackUrl: "image/motion/ulqiniAtt.png",
                standUrl: "image/motion/ulqiniStand.png",
                defendUrl: "image/motion/ulqiniDef.png",
                boostUrl: "image/motion/ulqinBlessing.png",
                iconUrl: "image/icons/ulshqiniIcon.png",
                experienceProvided: 36,
                pointsProvided : 3,
                numberOfSpells: 3,
                healUrl: "image/motion/ulqniHealth.png"
            );
         private int armorAdded = 3;
            protected override async Task OnInitializedAsync()
    {
         
        _enemy.Hp = ScaleEnemyStat(baseStat: _enemy.Hp, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.15);
        _enemy.Armor = ScaleEnemyStat(baseStat: _enemy.Armor, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.3);
        _enemy.Dmg = ScaleEnemyStat(baseStat: _enemy.Dmg, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.2);
        _enemy.Speed = ScaleEnemyStat(baseStat: _enemy.Speed, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.2);
        armorAdded = ScaleEnemyStat(baseStat: armorAdded, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.3);
        _enemy.ExperienceProvided = ScaleEnemyStat(baseStat:  _enemy.ExperienceProvided, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.2);
       _enemy.PointsProvided = ScaleEnemyStat(baseStat:  _enemy.PointsProvided, heroLevel: HeroStateService.Hero.Level, scalingFactor: 1.4);

    }
                private bool gameAccepted { get; set; } = false;
                private void AcceptGame()
            {
        
                gameAccepted = true;
            }
             private int ScaleEnemyStat(int baseStat, int heroLevel, double scalingFactor)
                {
                return (int)(baseStat * Math.Pow(scalingFactor, heroLevel - 1)); // Scale based on the hero's level
                    }

            private void GoHome() => NavigationManager.NavigateTo("/game");

            private string Story = " Do not take this opportunity lightly, brother. Train with Ymer Aga as though your life depends on it, for in truth, it may. The enemies you face will not be like the ones you have encountered before. They are cunning, relentless, and deadly. You must become stronger, faster, and wiser if you are to overcome them.";

        private List<string> enemyAbilities = new List<string> { "Attack","Defend" };
        private async Task<(int heroHp, int damageDealt, bool isMonster)> EnemyAttack(int heroArmor, int heroHp, int enemyDmg)
        {
            await Task.Delay(100);
            bool isMonster = false;
            int damageDealt = Math.Max(enemyDmg - heroArmor, 0);
            heroHp -= damageDealt;

            return (heroHp, damageDealt, isMonster); // Return the updated hero's HP and damage dealt
        }
        private async Task<(int enemyArmor, int armorAdded)> EnemyUpgradeArmor(int enemyArmor)
        {   
            await Task.Delay(100);
            enemyArmor += armorAdded;

            return (enemyArmor, armorAdded); // Return the updated hero's HP and damage dealt
        }

        }