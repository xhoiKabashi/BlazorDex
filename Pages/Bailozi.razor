@page "/Bailozi"
@using BlazorDex.Models
@inject NavigationManager NavigationManager




@if (!gameAccepted)
{
   <CardOfEnemy  OnClick="AcceptGame"  AbilityDesc="None"   OnClickNavigate="GoStory"  Story="@Story" Armor="@_enemy.Armor" Hp="@_enemy.Hp"  Speed="@_enemy.Speed" Weakness="None"  Name="@_enemy.Name"  Dmg="@_enemy.Dmg"/>
}
else {

<Action 
    SceneUrl="@_enemy.SceneUrl" 
    AttackUrl="@_enemy.AttackUrl" 
    StandUrl="@_enemy.StandUrl" 

    EnemyHp="@_enemy.Hp"
    EnemySpeed="@_enemy.Speed"
    EnemyArmor="@_enemy.Armor"
    EnemyDmg="@_enemy.Dmg"
    IconUrl="@_enemy.IconUrl"
    EnemyName="@_enemy.Name"
    PointsProvided="@_enemy.PointsProvided"
    ExperienceProvided="@_enemy.ExperienceProvided"
    NumberOfSpells="@_enemy.NumberOfSpells"
    EnemyAttack="EnemyAttack"
    enemyAbilities="enemyAbilities" 
    ChapterNumber="Bailozi"
    EnemyLevel="15"


/>
 <audio id="audio" src="audio/mace.mp3"></audio>
}

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    private Enemy _enemy = new Enemy(
        hp: 1000,
        speed: 500,
        armor: 400,
        dmg: 1000,
        name: "Bailozi",
        sceneUrl: "image/scenes/bailozi.png",
        attackUrl: "image/motion/bailoziAttack.png",
        standUrl: "image/motion/bailoziStand.png",
        defendUrl: null,
        boostUrl: null,
        iconUrl: "image/icons/knight.png",
        experienceProvided: 300,
        pointsProvided : 5,
        numberOfSpells: 1,
        healUrl: null
    );

    private bool gameAccepted { get; set; } = false;

    private void AcceptGame()
    {
        gameAccepted = true;
    }

    private void GoStory() => NavigationManager.NavigateTo("/Story");
    private string Story = "Brother, for nine years, you’ve suffered, your body broken with wounds. But now, Bajlozi has come. He’s taken our lands, and now he wants me. The people tremble in fear of him. But I still believe in you. You are the only one who can stop him, Gjergj. Rise, before everything is lost.";
   
    private List<string> enemyAbilities = new List<string> { "Attack" };

    private async Task<(int heroHp, int damageDealt, bool isMonster)> EnemyAttack(int heroArmor, int heroHp, int enemyDmg)
    {
        await PlayMonsterAttack();
        bool isMonster = false;
        int damageDealt = Math.Max(enemyDmg - heroArmor, 0);
        heroHp -= damageDealt;
        return (heroHp, damageDealt, isMonster); // Return the updated hero's HP and damage dealt
    }
private async Task PlayMonsterAttack()
{
    await JSRuntime.InvokeVoidAsync("eval", @"
        const audio = document.getElementById('audio'); audio.volume = 0.3; audio.play()");
}
}
