@using BlazorDex.Models
@using BlazorDex.Components
@inject HeroClient client
@inject HeroStateService HeroStateService
@inject NavigationManager NavigationManager
@inject GameAnimationService AnimationService
@inject GameLogic gameLogic



<div class=" h-full flex flex-col w-full items-center">
    @if (gameEnd)
    {
        <div class="flex flex-col justify-center items-center min-h-[calc(100dvh)] w-full text-text-third px-4">

    <div class="p-8 rounded-xl shadow-2xl max-w-sm w-full text-center" style="background-color: rgba(255, 249, 249, 0.1);">
        <h2 class="text-2xl font-bold uppercase tracking-wider mb-4 text-yellow-400">@EndGameMessage</h2>

     @if(winOnHero) {
        <div class="flex flex-col space-y-2">
            <div class="flex justify-between items-center">
                <p class="text-green-50">Experience Increased by</p>
                <h3 class="font-bold text-green-400">@finalExperience</h3>
            </div>
            <div class="flex justify-between items-center">
                <p class="text-green-50">Honors Increased by</p>
                <h3 class="font-bold text-green-400">@PointsProvided</h3>
            </div>
            
        </div>
     } 

        <div class="flex justify-center mt-4">
             <button @onclick="GoHome"
               class="py-2 px-4 bg-red-600 hover:bg-red-700 text-text-third font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out">
               Go Home
            </button>
        </div>
    </div>
</div>  

    }
    else
    {
        <div class="w-full flex flex-col justify-between h-full">

            @if(HeroStateService.Hero != null){
            <HealthBar HeroHP="@HeroHP" HeroStartHP="@heroStartingHp" EnemyHP="@EnemyHp" EnemyStartHP="@enemyStartingHp"
                HeroLevel="@HeroStateService.Hero.Level" EnemyLevel="@EnemyLevel" EnemyIconSrc="@IconUrl"  HeroIconSrc="image/icons/heroIcon.png"/>

             }   
            <StatInAction HeroSpeed="@HeroSpeed" HeroDamage="@HeroDmg" HeroArmor="@HeroArmor" EnemySpeed="@EnemySpeed"
                EnemyDamage="@EnemyDmg" EnemyArmor="@EnemyArmor" EnemyName="@EnemyName" />
            <Messages ActionMessages="@actionMessages" OnClick="GoHomeAndReset"/>
   
            <ActionUI isHeroTurn="@AnimationService.IsHeroTurn" isEnemyTurn="@AnimationService.IsEnemyTurn"
                EnemyIsHealing="@AnimationService.EnemyIsHealing" HeroIsHealing="@AnimationService.HeroIsHealing"
                EnemyUpgradeArmor="@AnimationService.EnemyUpgradeArmor"
                HeroUpgradeArmor="@AnimationService.HeroUpgradeArmor"
                EnemyIsGettingDmg="@AnimationService.EnemyIsGettingDmg"
                HeroIsGettingDmg="@AnimationService.HeroIsGettingDmg" HeroIsAtt="@AnimationService.HeroIsAtt"
                EnemyHeavyCrash="@AnimationService.EnemyHeavyCrash" EnemyDamageTaken="@AnimationService.GettingDamage"
                HeroDamageTaken="@AnimationService.GettingDamage" HpAdded="@AnimationService.HpAdded"
                HeavyCrash="@AnimationService.HeavyCrash" EnemyIsBessing="@AnimationService.EnemyIsBessing" 
                HeroBoosting="@AnimationService.HeroBoosting" ArmorAdded="@AnimationService.ArmorAdded" 
                ArmorReduction="@AnimationService.ArmorReduction" AttackAdded="AnimationService.AttackAdded"
                IsReducingDamage="@AnimationService.IsReducingDamage"
                DamageReduced="@AnimationService.DamageReduced"
                eDamageAdded="@AnimationService.eDamageAdded"
                eIsAddingDamage="AnimationService.eIsAddingDamage"


                EnemyIsAtt="@AnimationService.EnemyIsAtt"
                SceneUrl="@SceneUrl"
                AttackUrl="@AttackUrl"
                StandUrl="@StandUrl"
                DefendUrl="@DefendUrl"
                HealUrl="@HealUrl"
                BoostUrl="@BoostUrl"
                MonsterAttack="@AnimationService.IsMonster"
                isNympth="@AnimationService.IsNympth"
                EnemyUsingAbility="@AnimationService.EnemyUsingAbility"
                HeroStandingImageUrl="@HeroStandingImageUrl"
                HeroStandingAttackUrl="@HeroStandingAttackUrl"

            
                 />

       @if (!HasPerformed)
                        {
        <ActionButton
        Attack="() => PerformAction(HeroActionType.Attack)"
        Defend="() => PerformAction(HeroActionType.Defend)"
        Ability="() => PerformAction(HeroActionType.HeavyCrash)"
         HerTears="() => PerformAction(HeroActionType.HerTears)" AbilityNotLocked="@AbilityNotLocked"/> 
                }
            else
                    {
      <ActionButton  AbilityNotLocked="@AbilityNotLocked"/>
      }
    
        </div>
    }
</div>

@code {


    /// Hero Props and Parameters
    private int HeroDmg;
    private int HeroHP;
    private int HeroSpeed;
    private int HeroArmor;
    private int originalArmor;
    private bool isDefending = false;
 


    //// Enemy Props and Parameters
    [Parameter] public int EnemyHp {set; get;}
    [Parameter] public int EnemySpeed {set; get;}
    [Parameter] public int EnemyArmor {set; get;}
    [Parameter] public int EnemyDmg  {set; get;}
    [Parameter] public string? EnemyName { get; set; }
    [Parameter] public int NumberOfSpells {get; set; }
    [Parameter] public int EnemyLevel {get; set; }
    [Parameter] public bool AbilityNotLocked {get; set; } = true;

    private int originalArmorEnemy;
    private bool isDefendingEnemy = false;


    [Parameter] public List<string> enemyAbilities { get; set; } = new List<string>();
    [Parameter] public Func<int, int, int, Task<(int heroHp, int damageDealt, bool isMonster)>>? EnemyAttack { get; set; }
    [Parameter] public Func<int, Task<(int enemyArmor, int armorAdded)>>? EnemyUpgradeArmor { get; set; }
    [Parameter] public Func<int,int, Task<(int enemyHp, int hpAdded)>>? EnemyHeal { get; set; }
    [Parameter] public Func<int,int,int,int,int, Task<(int heroHp, int damageDealt, int heroArmor, int armorReduction, bool isNympth, int enemyHp,int hpAdded)>>? specialAbilityNympth { get; set; }
    [Parameter] public Func<int,int,int,int, Task<(int heroHp, int damageDealt, bool isNympth, int enemyHp,int hpAdded)>>? specialAbilityShtriga { get; set; }
    [Parameter] public Func<int, Task<(int armorReduction, bool isNympth,int heroArmor)>>? specialAbilityKatallani { get; set; }
    [Parameter] public Func<int, int, int,int, Task<(int heroHp, int damageDealt, bool isMonster, int heroDmg)>>? specialAbilityKucedra { get; set; }
    [Parameter] public Func<int, int, int, Task<(int heroHp, int damageDealt, bool isMonster)>>? specialAbilityLugati{ get; set; }
    [Parameter] public Func<int, int, Task<(int enemyDmg, bool isMonster, int heroDmg)>>? specialAssassin { get; set; }
     [Parameter] public Func<int, int, int,int, Task<(int heroHp, int damageDealt, bool isMonster, int heroDmg)>>? specialAbilityShooter { get; set; }









    /// Enemy Image
    [Parameter] public string? SceneUrl {get; set; }
    [Parameter] public string? AttackUrl {get; set; }
    [Parameter] public string? StandUrl {get; set; }
    [Parameter] public string? DefendUrl {get; set; }
    [Parameter] public string? HealUrl {get; set; }
    [Parameter] public string? BoostUrl {get; set; }
    [Parameter] public string? IconUrl {get; set; }

 /// Points and Experience finalExperience
    [Parameter] public int finalExperience {get; set; }
    [Parameter] public int ExperienceProvided {get; set; }

    [Parameter] public int PointsProvided {get; set; }
    [Parameter] public string? ChapterNumber {get; set; }




   //// general parameters
    private int turnCounter = 0;
    private List<string> actionMessages = new List<string>();
    private bool HasPerformed = false;
    private bool gameEnd = false;
    private bool winOnHero = false;
    private bool onGame = true;


    private string? EndGameMessage;
    public int? heroStartingHp { get; set; }
    public int enemyStartingHp { get; set; }

    private string HeroStandingImageUrl = "image/motion/standing.png";
    private string HeroStandingAttackUrl = "image/motion/attacking.png";



    /// Initialization of the stats form the game State
    protected override async Task OnInitializedAsync()
    {

        
        HeroStateService.OnChange += StateHasChanged;

        if (HeroStateService.Hero != null)
        {
            heroStartingHp = HeroStateService.Hero.Hp;
            HeroDmg = HeroStateService.Hero.Dmg;
            HeroHP = HeroStateService.Hero.Hp;
            HeroSpeed = HeroStateService.Hero.Speed;
            HeroArmor = HeroStateService.Hero.Armor;
        }

    enemyStartingHp = EnemyHp;
    if(ChapterNumber == "Bailozi") 
    {
    HeroStandingImageUrl = "image/motion/9Stand.jpg";
    HeroStandingAttackUrl = "image/motion/9Attack.png";

    HeroDmg = 1500;
     heroStartingHp = 500;
    HeroHP = 500;
    HeroArmor = 501;


    }

        await DetermineTurnOrder();

    }

private async Task DetermineTurnOrder()
{
    if (HeroSpeed >= EnemySpeed)
    {   HasPerformed = false;
        AnimationService.SetTurn(true);
    }
    else
    {
        AnimationService.SetTurn(false);
        HasPerformed = true;
        await Task.Delay(2000); 
        // Trigger the enemy's attack or action immediately
        await ExecuteEnemyAction();
        
        if (!gameEnd)
        {
            AnimationService.SetTurn(true);  // Switch back to hero's turn after enemy attack
            HasPerformed = false;  // Reset to allow hero's action
        }
    }
}

 //// Hero Actions / Attack
    private async Task HeroAttack()
    {
        /// Attack Logic

        int damageDealt = Math.Max(HeroDmg - EnemyArmor, 0);
        EnemyHp -= damageDealt;
      /// Animation
        AnimationService.SetGettingDamage(false, true, damageDealt); // Enemy is getting damage
        AnimationService.SetIsAtt(true, true);
        await DisplayActionMessage("Hero attacks!");
        AnimationService.SetTurn(false);
        await AnimationService.ResetStatus();
        // Notify the UI of the change
        StateHasChanged();
         /// Game over
        if (EnemyHp <= 0)
        {
            gameEnd = true;
            winOnHero = true;
            EndGameMessage = "Victory!";
            await WinBattle();
        }
    }
 //// Hero Actions / Upgarde Armor
private async Task HeroUpgradeArmor()
{
    // Upgrade Logic
    isDefending = true;
    
    if (isDefending)
    {
        // Check if the armor is negative
        if (HeroArmor < 0)
        {
            // Multiply the negative armor to reduce its absolute value
            HeroArmor = HeroArmor / 2; // Example: -20 becomes -10
        }
        else
        {
            // Double the armor for positive values
            HeroArmor *= 2; // Example: 10 becomes 20
        }
    }

    // Animation
    AnimationService.SetUpgradeArmor(true, true, HeroArmor);
    await DisplayActionMessage(HeroArmor < 0 
        ? "Reduces the negative armor value!" 
        : "Doubles the armor for one turn!");
    
    AnimationService.SetTurn(false);
    await AnimationService.ResetStatus();
    
    // Notify the UI of the change
    StateHasChanged();
}

 //// Hero Actions / Heavy Crash

  private async Task HeavyCrash(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
        /// Abilty Logic
         EnemyArmor -= HeroStateService.Hero.HeavyCrashDmg;

        /// Animation
            AnimationService.SetHeavyCrash(true, true);
            AnimationService.SetArmorReduction(true, HeroStateService.Hero.HeavyCrashDmg);
            await DisplayActionMessage("Heavy Crash!");
            AnimationService.SetTurn(false);

            // Notify the UI of the change
            await AnimationService.ResetStatus();
  }
  private async Task TearsHealing(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
       /// Ability Logic
          HeroHP = Math.Min(HeroHP + HeroStateService.Hero.TearHealHp, heroStartingHp ?? 0);

        /// Animation
          AnimationService.SetHealing(true, true, HeroStateService.Hero.TearHealHp);
          await DisplayActionMessage("Hero heals!");
          AnimationService.SetTurn(false);

          // Notify the UI of the change
          await AnimationService.ResetStatus();
  }

  private async Task MilkRage(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
          HasPerformed = true;
       /// Ability logic
         HeroDmg  += HeroStateService.Hero.MilkRegeStats;
             if (HeroArmor < 0)
        {
            // Multiply the negative armor to reduce its absolute value
            HeroArmor = HeroArmor - HeroStateService.Hero.MilkRegeStats; // Example: -20 becomes -10
        }
        else
        {
            // Double the armor for positive values
            HeroArmor += HeroStateService.Hero.MilkRegeStats; // Example: 10 becomes 20
        }
       /// Animation
            AnimationService.SetHeroBoosting(true,true, HeroStateService.Hero.MilkRegeStats, HeroStateService.Hero.MilkRegeStats);
            await AnimationService.ResetStatus();   
  }
    private async Task ExecuteHeroAction(HeroActionType action)
    {
        switch (action)
        {
            case HeroActionType.Attack:
                HasPerformed = true;
                await HeroAttack();
                break;
            case HeroActionType.Defend:
                HasPerformed = true;
                await HeroUpgradeArmor();
                break;
            case HeroActionType.HeavyCrash:
                HasPerformed = true;
                await HeavyCrash();
                break;
                case HeroActionType.HerTears:
                HasPerformed = true;
                await TearsHealing();
                break;
        }
    }

    private async Task PerformAction(HeroActionType action)
    {
        if (HeroStateService.Hero == null || gameEnd)
            return;

        turnCounter++;

        if (AnimationService.IsHeroTurn)
        {  
              if(AbilityNotLocked){
               if(HeroStateService.Hero.MilkRegeLevel > 0){
                await MilkRage();
              } 
                
                }
            await ExecuteHeroAction(action);
                    if(isDefendingEnemy){
                    EnemyArmor /= 2;
                    isDefendingEnemy = false;
                    }
            if (!gameEnd)
            {
                await ExecuteEnemyAction();
                if(isDefending){
                    HeroArmor /= 2;
                    isDefending = false;
                }
            }
        }
        else
        {
            await ExecuteEnemyAction();
            if (!gameEnd)
            {
                await ExecuteHeroAction(action);
            }
        }
    }

    private async Task ExecuteEnemyAction()
    {
        EnemyActionType enemyAction = DetermineEnemyAction();
        switch (enemyAction)
        {
            case EnemyActionType.Attack:
             if (EnemyAttack != null) 
            { 
                var result = await EnemyAttack(HeroArmor, HeroHP, EnemyDmg);
                 HeroHP = result.heroHp;
    
                int damageDealt = result.damageDealt;
                 /// Animation
                AnimationService.SetIsAtt(false, true);
                AnimationService.setIsMonster(result.isMonster);
                AnimationService.SetGettingDamage(true, true, damageDealt);
                await DisplayActionMessage($"{EnemyName} attacks!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 

                if (HeroHP <= 0)
            {
                 gameEnd = true;
                EndGameMessage = "Hero is defeated!";
            }
            }
                HasPerformed = false;
                break;

            case EnemyActionType.Defend:
             if (EnemyUpgradeArmor != null) 
            { 
                 var ArmordResult = await EnemyUpgradeArmor(EnemyArmor);
                 isDefendingEnemy = true;
                 if(isDefendingEnemy){
                  EnemyArmor *= 2;
                 }
                /// Animation
                AnimationService.SetUpgradeArmor(false, true, EnemyArmor / 2);
                await DisplayActionMessage($"{EnemyName} double armor one turn!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                HasPerformed = false;
            }
                break;

            case EnemyActionType.Heal:
               if (EnemyHeal != null) 
            { 
                 var HealthResult = await EnemyHeal(EnemyHp, enemyStartingHp);
                 EnemyHp = HealthResult.enemyHp;
               /// Animation
                AnimationService.SetHealing(false, true, HealthResult.hpAdded);
                await DisplayActionMessage($"{EnemyName} heals!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                HasPerformed = false;
            }
        
                break;

            case EnemyActionType.SpecialAbility:


            switch (ChapterNumber)
    {
    
        case "Chapter2":
        if (specialAbilityNympth != null) {
            var abilityResultNymph = await specialAbilityNympth(HeroArmor, HeroHP, EnemyDmg, EnemyHp, enemyStartingHp);
            HeroHP = abilityResultNymph.heroHp;
            HeroArmor = abilityResultNymph.heroArmor;
            AnimationService.SetIsAtt(false, true);
            AnimationService.SetGettingDamage(true, true, abilityResultNymph.damageDealt);
            AnimationService.SetArmorReduction(false, abilityResultNymph.armorReduction);
            AnimationService.setIsNympth(abilityResultNymph.isNympth);
            AnimationService.SetHeavyCrash(false, true);
            await DisplayActionMessage($"{EnemyName} use ability!");
       
        }
            break;

        case "Chapter3":
        if (specialAbilityShtriga != null) {
           var abilityResultShtriga = await specialAbilityShtriga(HeroHP, EnemyDmg, EnemyHp, enemyStartingHp);
           HeroHP = abilityResultShtriga.heroHp;
           AnimationService.SetGettingDamage(true, true, abilityResultShtriga.damageDealt);
           AnimationService.setIsNympth(abilityResultShtriga.isNympth);
           EnemyHp = abilityResultShtriga.enemyHp;
           AnimationService.SetHealing(false, true, abilityResultShtriga.hpAdded);
           await DisplayActionMessage($"{EnemyName} use ability!");
        }
            break;

            case "Chapter4":
            if (specialAbilityKatallani != null) {
           var abilityResultKatallani = await specialAbilityKatallani(HeroArmor);
           HeroArmor = abilityResultKatallani.heroArmor;
           AnimationService.SetHeavyCrash(false, true);
           AnimationService.setEnemyUsingAbility(true);
           AnimationService.setIsMonster(abilityResultKatallani.isNympth);   
           AnimationService.SetArmorReduction(false, abilityResultKatallani.armorReduction);
           await DisplayActionMessage($"{EnemyName} use ability!");
             }

            break;

            case "Chapter5":
             if (specialAbilityKucedra != null) 
            { 
                var resultKucedra = await specialAbilityKucedra(HeroArmor, HeroHP, EnemyDmg, HeroDmg);
                 HeroHP = resultKucedra.heroHp;
                 HeroDmg = resultKucedra.heroDmg;
                AnimationService.SetIsAtt(false, true);
                AnimationService.setIsMonster(resultKucedra.isMonster);
                AnimationService.SetGettingDamage(true, true, resultKucedra.damageDealt);
                AnimationService.SetReducingDamage(true, 20);
                await DisplayActionMessage($"{EnemyName} use ability!");
            }

            break;

            case "Chapter6":
                    if (specialAbilityLugati != null) { 
                        var resultLugati = await specialAbilityLugati(HeroArmor, HeroHP, EnemyDmg);
                        HeroHP = resultLugati.heroHp;
                        AnimationService.SetIsAtt(false, true);
                        AnimationService.setIsMonster(resultLugati.isMonster);
                        AnimationService.SetGettingDamage(true, true, resultLugati.damageDealt);
                        
                        chapter6ActionCounter++;

                        if (chapter6ActionCounter < 2)
                        {
                            // Check if the action needs to be performed again
                            await DisplayActionMessage($"{EnemyName} uses ability!");
                            await AnimationService.ResetStatus();
                            StateHasChanged(); 
                            await Task.Delay(2000);
                            await ExecuteEnemyAction(); // Perform the action again
                        }
                        else
                        {
                            chapter6ActionCounter = 0; // Reset the counter after performing the action twice
                            await DisplayActionMessage($"{EnemyName} uses ability!");
                        }
                    }

            break;
               case "Assassin":
             if (specialAssassin != null) 
            { 
                var resultKucedra = await specialAssassin(EnemyDmg, HeroDmg);
                 EnemyDmg = resultKucedra.enemyDmg;
                 HeroDmg = resultKucedra.heroDmg;
                AnimationService.SetIsAtt(false, true);
                AnimationService.setIsMonster(resultKucedra.isMonster);
                AnimationService.SetReducingDamage(true, 30);
                AnimationService.eSetAddingDamage(true, 30);

                await DisplayActionMessage($"{EnemyName} use ability!");
            }

            break;
            case "Shooter":
             if (specialAbilityShooter != null) 
            { 
                var resultKucedra = await specialAbilityShooter(HeroArmor, HeroHP, EnemyDmg, HeroDmg);
                 HeroHP = resultKucedra.heroHp;
                 HeroArmor -= 60;
                AnimationService.SetIsAtt(false, true);
                AnimationService.setIsMonster(resultKucedra.isMonster);
                AnimationService.SetGettingDamage(true, true, resultKucedra.damageDealt);
                AnimationService.SetHeavyCrash(false, true);
                 AnimationService.SetArmorReduction(false, 60);
                await DisplayActionMessage($"{EnemyName} use ability!");
            }

            break;
            
    }
                await AnimationService.ResetStatus();
                AnimationService.SetTurn(true);
                StateHasChanged(); 
                await Task.Delay(1500);
                HasPerformed = false;
        
       
            if (HeroHP <= 0)
            {
                gameEnd = true;
                onGame = false;
                EndGameMessage = "Hero is defeated!";
            }
           
                break;
        }
    }
/// AI
private EnemyActionType DetermineEnemyAction()
{
    Random random = new Random();
    string randomAbility;
    
    do
    {
        randomAbility = enemyAbilities[random.Next(enemyAbilities.Count)];

        // Check if the enemy has full HP and try to avoid healing
        if (randomAbility == "Heal" && EnemyHp == enemyStartingHp) 
        {
            continue; // Skip "Heal" if HP is full and select another ability
        }
        if (randomAbility == "SpecialAbility" && HeroArmor == 0) 
        {
            continue; // Skip "Heal" if HP is full and select another ability
        }
        break; // Exit loop if a valid ability is selected
    }
    while (true);

    return randomAbility switch
    {
        "Attack" => EnemyActionType.Attack,
        "Heal" => EnemyActionType.Heal,
        "Defend" => EnemyActionType.Defend,
        "SpecialAbility" => EnemyActionType.SpecialAbility,
        _ => throw new InvalidOperationException($"Unknown ability: {randomAbility}")
    };
}

 
    private async Task WinBattle()
    
    {   
        
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is nul
        /// calculate the experience
        if(onGame){
        int levelMultiplier = HeroStateService.Hero.Level > 1 ? HeroStateService.Hero.Level : 1;
        finalExperience = ExperienceProvided * levelMultiplier;
        HeroStateService.Hero.Exp += finalExperience;
        HeroStateService.Hero.Points += PointsProvided;
        } 
        /// update chapters 
         switch (ChapterNumber)
    {
        case "Training":
            if( HeroStateService.Hero.Wounds == 0 )
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter1":
            HeroStateService.Hero.Story1 = true;
            HeroStateService.Hero.Story01 = true;
            HeroStateService.Hero.Wounds += 1;

            break;
        case "Chapter2":
            HeroStateService.Hero.Story2 = true;
            HeroStateService.Hero.Story02 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter3":
            HeroStateService.Hero.Story3 = true;
            HeroStateService.Hero.Story03 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter4":
            HeroStateService.Hero.Story4 = true;
            HeroStateService.Hero.Story04 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
            case "Chapter5":
            HeroStateService.Hero.Story5 = true;
            HeroStateService.Hero.Story05 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
                case "Chapter6":
            HeroStateService.Hero.Story6 = true;
            HeroStateService.Hero.Story06 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
                case "Assassin":
            HeroStateService.Hero.Story7 = true;
            HeroStateService.Hero.Story07 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
                case "Shooter":
            HeroStateService.Hero.Story8 = true;
            HeroStateService.Hero.Story08 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
    }


        try
        {
            await client.UpdateHero(HeroStateService.Hero);
            HeroStateService.SetHero(HeroStateService.Hero);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Hero: {ex.Message}");
        }
    }

    private void GoHome() => NavigationManager.NavigateTo("/game");

    private void RemoveMessage(string message)
    {
        // Check if the message exists before attempting to remove it
        if (actionMessages.Contains(message))
        {
            actionMessages.Remove(message);
        }
    }

    private async Task DisplayActionMessage(string message, int delay = 1500)
    {
        actionMessages.Add(message);
        StateHasChanged();
        await Task.Delay(delay);
        actionMessages.Remove(message);
        StateHasChanged();
    }

    private enum HeroActionType
    {
        Attack,
        Defend,
        HeavyCrash,
        HerTears,
        
    }
     private enum EnemyActionType
    {
        Attack,
        Defend,
        Heal,
        SpecialAbility,

    }

    private async Task GoHomeAndReset() 
    { 
    onGame = false; 
    AbilityNotLocked = true;
    NavigationManager.NavigateTo("/game");
    // Reset enemy stats
    gameEnd = false;
    EnemyHp = 0;
    EnemySpeed = 0;
    EnemyArmor = 0;
    EnemyDmg = 0;
    enemyStartingHp = 0;
    IconUrl = null;
    SceneUrl = null;
    AttackUrl = null;
    StandUrl = null;
    DefendUrl = null;
    HealUrl = null;
    BoostUrl = null;
    // Reset animation states
    await AnimationService.ResetStatus();
    // Reset game state variables
    actionMessages.Clear();
    HasPerformed = false;
    turnCounter = 0;
    EndGameMessage = null;
    EnemyName = null;
   
    StateHasChanged();
    }
private int chapter6ActionCounter = 0;
}