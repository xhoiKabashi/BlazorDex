@using BlazorDex.Models
@using BlazorDex.Components
@inject HeroClient client
@inject HeroStateService HeroStateService
@inject NavigationManager NavigationManager
@inject GameAnimationService AnimationService
@inject GameLogic gameLogic



<div class=" h-full flex flex-col w-full items-center bg-center bg-cover" style="background-image: url('image/login1.png');">
    @if (gameEnd)
    {
        <div class="flex flex-col w-full h-full justify-center items-center " style="background-image: url('image/login1.png');">
            <h2 class="text-5xl font-extrabold  mb-6 text-text-third">@EndGameMessage</h2>
            <button @onclick="GoHome"
                class=" bg-text-third text-white font-extrabold tracking-widest uppercase py-4 px-8 rounded-3xl shadow-xl transition transform hover:scale-110">
               Go Home
            </button>
        </div>
    }
    else
    {
        <div class="w-full flex flex-col justify-between h-full">

            @if(HeroStateService.Hero != null){
            <HealthBar HeroHP="@HeroHP" HeroStartHP="@heroStartingHp" EnemyHP="@EnemyHp" EnemyStartHP="@enemyStartingHp"
                HeroLevel="@HeroStateService.Hero.Level" EnemyLevel="1" EnemyIconSrc="@IconUrl"  HeroIconSrc="image/icons/heroIcon.png"/>

             }   
            <StatInAction HeroSpeed="@HeroSpeed" HeroDamage="@HeroDmg" HeroArmor="@HeroArmor" EnemySpeed="@EnemySpeed"
                EnemyDamage="@EnemyDmg" EnemyArmor="@EnemyArmor" EnemyName="@EnemyName" />
            <Messages ActionMessages="@actionMessages" OnClick="GoHomeAndReset"/>
   
            <ActionUI isHeroTurn="@AnimationService.IsHeroTurn" isEnemyTurn="@AnimationService.IsEnemyTurn"
                EnemyIsHealing="@AnimationService.EnemyIsHealing" HeroIsHealing="@AnimationService.HeroIsHealing"
                EnemyUpgradeArmor="@AnimationService.EnemyUpgradeArmor"
                HeroUpgradeArmor="@AnimationService.HeroUpgradeArmor"
                EnemyIsGettingDmg="@AnimationService.EnemyIsGettingDmg"
                HeroIsGettingDmg="@AnimationService.HeroIsGettingDmg" HeroIsAtt="@AnimationService.HeroIsAtt"
                EnemyHeavyCrash="@AnimationService.EnemyHeavyCrash" EnemyDamageTaken="@AnimationService.GettingDamage"
                HeroDamageTaken="@AnimationService.GettingDamage" HpAdded="@AnimationService.HpAdded"
                HeavyCrash="@AnimationService.HeavyCrash" EnemyIsBessing="@AnimationService.EnemyIsBessing" 
                HeroBoosting="@AnimationService.HeroBoosting" ArmorAdded="@AnimationService.ArmorAdded" 
                ArmorReduction="@AnimationService.ArmorReduction" AttackAdded="AnimationService.AttackAdded"
                EnemyIsAtt="@AnimationService.EnemyIsAtt"
                SceneUrl="@SceneUrl"
                AttackUrl="@AttackUrl"
                StandUrl="@StandUrl"
                DefendUrl="@DefendUrl"
                HealUrl="@HealUrl"
                BoostUrl="@BoostUrl"
                MonsterAttack="@AnimationService.IsMonster"
                isNympth="@AnimationService.IsNympth"
            
                 />

       @if (!HasPerformed)
                        {
        <ActionButton
        Attack="() => PerformAction(HeroActionType.Attack)"
        Defend="() => PerformAction(HeroActionType.Defend)"
        Ability="() => PerformAction(HeroActionType.HeavyCrash)"
         HerTears="() => PerformAction(HeroActionType.HerTears)"
         Ability2="() => PerformAction(HeroActionType.MilkRage)"   />
                }
            else
                    {
      <ActionButton />
      }
    
        </div>
    }
</div>

@code {


    /// Hero Props and Parameters
    private int HeroDmg;
    private int HeroHP;
    private int HeroSpeed;
    private int HeroArmor;

    //// Enemy Props and Parameters
    [Parameter] public int EnemyHp {set; get;}
    [Parameter] public int EnemySpeed {set; get;}
    [Parameter] public int EnemyArmor {set; get;}
    [Parameter] public int EnemyDmg  {set; get;}
    [Parameter] public string? EnemyName { get; set; }
    [Parameter] public int NumberOfSpells {get; set; }

    [Parameter] public List<string> enemyAbilities { get; set; } = new List<string>();
    [Parameter] public Func<int, int, int, Task<(int heroHp, int damageDealt, bool isMonster)>>? EnemyAttack { get; set; }
    [Parameter] public Func<int, Task<(int enemyArmor, int armorAdded)>>? EnemyUpgradeArmor { get; set; }
    [Parameter] public Func<int,int, Task<(int enemyHp, int hpAdded)>>? EnemyHeal { get; set; }
    [Parameter] public Func<int,int,int,int,int, Task<(int heroHp, int damageDealt, int heroArmor, int armorReduction, bool isNympth, int enemyHp,int hpAdded)>>? specialAbility { get; set; }


    /// Enemy Image
    [Parameter] public string? SceneUrl {get; set; }
    [Parameter] public string? AttackUrl {get; set; }
    [Parameter] public string? StandUrl {get; set; }
    [Parameter] public string? DefendUrl {get; set; }
    [Parameter] public string? HealUrl {get; set; }
    [Parameter] public string? BoostUrl {get; set; }
    [Parameter] public string? IconUrl {get; set; }

 /// Points and Experience
    [Parameter] public int ExperienceProvided {get; set; }
    [Parameter] public int PointsProvided {get; set; }
    [Parameter] public string? ChapterNumber {get; set; }



   //// general parameters
    private int turnCounter = 0;
    private List<string> actionMessages = new List<string>();
    private bool HasPerformed = false;
    private bool gameEnd = false;
    private string? EndGameMessage;
    public int? heroStartingHp { get; set; }
    public int enemyStartingHp { get; set; }

    /// Initialization of the stats form the game State
    protected override async Task OnInitializedAsync()
    {
        HeroStateService.OnChange += StateHasChanged;

        if (HeroStateService.Hero != null)
        {
            heroStartingHp = HeroStateService.Hero.Hp;
            HeroDmg = HeroStateService.Hero.Dmg;
            HeroHP = HeroStateService.Hero.Hp;
            HeroSpeed = HeroStateService.Hero.Speed;
            HeroArmor = HeroStateService.Hero.Armor;
        }

        enemyStartingHp = EnemyHp;

        await DetermineTurnOrder();

    }

private async Task DetermineTurnOrder()
{
    if (HeroSpeed >= EnemySpeed)
    {   HasPerformed = false;
        AnimationService.SetTurn(true);
    }
    else
    {
        AnimationService.SetTurn(false);
        HasPerformed = true;
        await Task.Delay(2000);  // Optional: Add delay for a smoother transition

        // Trigger the enemy's attack or action immediately
        await ExecuteEnemyAction();
        
        if (!gameEnd)
        {
            AnimationService.SetTurn(true);  // Switch back to hero's turn after enemy attack
            HasPerformed = false;  // Reset to allow hero's action
        }
    }
}

 //// Hero Actions / Attack
    private async Task HeroAttack()
    {
        /// Attack Logic

        int damageDealt = Math.Max(HeroDmg - EnemyArmor, 0);
        EnemyHp -= damageDealt;
      /// Animation
        AnimationService.SetGettingDamage(false, true, damageDealt); // Enemy is getting damage
        AnimationService.SetIsAtt(true, true);
        await DisplayActionMessage("Hero attacks!");
        AnimationService.SetTurn(false);
        await AnimationService.ResetStatus();
        // Notify the UI of the change
        StateHasChanged();
         /// Game over
        if (EnemyHp <= 0)
        {
            gameEnd = true;
            EndGameMessage = "Victory!";
            await WinBattle();
        }
    }
 //// Hero Actions / Upgarde Armor
 private async Task HeroUpgradeArmor(){
        /// Upgrade Logic
         HeroArmor += 10;
        /// Animation
         AnimationService.SetUpgradeArmor(true, true, 10);
         await DisplayActionMessage("Hero defends!");
         AnimationService.SetTurn(false);
         await AnimationService.ResetStatus();
        // Notify the UI of the change
         StateHasChanged();
 }
 //// Hero Actions / Heavy Crash

  private async Task HeavyCrash(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
        /// Abilty Logic
         EnemyArmor -= HeroStateService.Hero.HeavyCrashDmg;

        /// Animation
            AnimationService.SetHeavyCrash(true, true);
            AnimationService.SetArmorReduction(true, HeroStateService.Hero.HeavyCrashDmg);
            await DisplayActionMessage("Heavy Crash!!");
            AnimationService.SetTurn(false);

            // Notify the UI of the change
            await AnimationService.ResetStatus();
  }
  private async Task TearsHealing(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
       /// Ability Logic
          HeroHP = Math.Min(HeroHP + HeroStateService.Hero.TearHealHp, heroStartingHp ?? 0);

        /// Animation
          AnimationService.SetHealing(true, true, HeroStateService.Hero.TearHealHp);
          await DisplayActionMessage("Hero heals!");
          AnimationService.SetTurn(false);

          // Notify the UI of the change
          await AnimationService.ResetStatus();
  }

  private async Task MilkRage(){
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is null
       /// Ability logic
         HeroDmg  += HeroStateService.Hero.MilkRegeStats;
         HeroArmor += HeroStateService.Hero.MilkRegeStats;
       /// Animation
            AnimationService.SetHeroBoosting(true,true, HeroStateService.Hero.MilkRegeStats, HeroStateService.Hero.MilkRegeStats);
            await DisplayActionMessage("Milk Rage!!");
            AnimationService.SetTurn(false);
            await AnimationService.ResetStatus();       

       /// Notify the UI of the change
          await AnimationService.ResetStatus();
  }
        private async Task EnemyBoost(){
        /// Ability logic
        EnemyArmor += 5;
        EnemyDmg +=10;
       /// Animation     
    
        AnimationService.SetHeroBoosting(false, true, 5, 10); /// armor , attack
        await DisplayActionMessage("Enemy is Raging!");
        EnemyDmg += 5;
        AnimationService.SetTurn(true);
        await AnimationService.ResetStatus();
        /// Notify the UI of the change
        StateHasChanged(); 

 }

    private async Task ExecuteHeroAction(HeroActionType action)
    {
        switch (action)
        {
            case HeroActionType.Attack:
                HasPerformed = true;
                await HeroAttack();
                break;
            case HeroActionType.Defend:
                HasPerformed = true;
                await HeroUpgradeArmor();
                break;
            case HeroActionType.HeavyCrash:
                HasPerformed = true;
                await HeavyCrash();
                break;
                case HeroActionType.HerTears:
                HasPerformed = true;
                await TearsHealing();

                break;
                case HeroActionType.MilkRage:
                HasPerformed = true;
                await MilkRage();
                break;
        }
    }

    private async Task PerformAction(HeroActionType action)
    {
        if (HeroStateService.Hero == null || gameEnd)
            return;

        turnCounter++;

        if (AnimationService.IsHeroTurn)
        {
            await ExecuteHeroAction(action);
            if (!gameEnd)
            {
                await ExecuteEnemyAction();
            }
        }
        else
        {
            await ExecuteEnemyAction();
            if (!gameEnd)
            {
                await ExecuteHeroAction(action);
            }
        }
    }

    private async Task ExecuteEnemyAction()
    {
        EnemyActionType enemyAction = DetermineEnemyAction();
        switch (enemyAction)
        {
            case EnemyActionType.Attack:
             if (EnemyAttack != null) 
            { 
                   var result = await EnemyAttack(HeroArmor, HeroHP, EnemyDmg);
                 HeroHP = result.heroHp;
    
                int damageDealt = result.damageDealt;
                 /// Animation
                AnimationService.SetIsAtt(false, true);
                AnimationService.setIsMonster(result.isMonster);
                AnimationService.SetGettingDamage(true, true, damageDealt);
                await DisplayActionMessage($"{EnemyName} attacks!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                if (HeroHP <= 0)
            {
                 gameEnd = true;
                EndGameMessage = "Hero is defeated!";
            }
            }
                await Task.Delay(2000);
                HasPerformed = false;
                break;

            case EnemyActionType.Defend:
             if (EnemyUpgradeArmor != null) 
            { 
                 var ArmordResult = await EnemyUpgradeArmor(EnemyArmor);
                EnemyArmor = ArmordResult.enemyArmor;
                /// Animation
                AnimationService.SetUpgradeArmor(false, true, ArmordResult.armorAdded);
                await DisplayActionMessage($"{EnemyName} defends!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                HasPerformed = false;
            }
                break;

            case EnemyActionType.Heal:
               if (EnemyHeal != null) 
            { 
                 var HealthResult = await EnemyHeal(EnemyHp, enemyStartingHp);
                 EnemyHp = HealthResult.enemyHp;
               /// Animation
                AnimationService.SetHealing(false, true, HealthResult.hpAdded);
                await DisplayActionMessage($"{EnemyName} heals!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                HasPerformed = false;
            }
        
                break;

             case EnemyActionType.SpecialAbility:


             if(specialAbility != null) {
             var abilityResult = await specialAbility(HeroArmor, HeroHP, EnemyDmg, EnemyHp, enemyStartingHp);
              HeroHP = abilityResult.heroHp;
              HeroArmor = abilityResult.heroArmor;

            switch (ChapterNumber)
    {
    
        case "Chapter2":
                 /// Animation
            AnimationService.SetIsAtt(false, true);
            AnimationService.SetGettingDamage(true, true, abilityResult.damageDealt);
            AnimationService.SetArmorReduction(false, abilityResult.armorReduction);
            AnimationService.setIsNympth(abilityResult.isNympth);
            AnimationService.SetHeavyCrash(false, true);
            break;

        case "Chapter3":
           /// contect here
           AnimationService.SetGettingDamage(true, true, abilityResult.damageDealt);
           AnimationService.setIsNympth(abilityResult.isNympth);
           EnemyHp = abilityResult.enemyHp;
           AnimationService.SetHealing(false, true, abilityResult.hpAdded);
            break;

    }
                await DisplayActionMessage($"{EnemyName} attacks!");
                AnimationService.SetTurn(true);
                await AnimationService.ResetStatus();
                StateHasChanged(); 
                await Task.Delay(2000);
                HasPerformed = false;
                
             }
            if (HeroHP <= 0)
            {
                gameEnd = true;
                EndGameMessage = "Hero is defeated!";
            }
           
                break;
        }
    }
/// AI
private EnemyActionType DetermineEnemyAction()
{
    Random random = new Random();
    string randomAbility = enemyAbilities[random.Next(enemyAbilities.Count)];
    return randomAbility switch
    {
        "Attack" => EnemyActionType.Attack,
        "Heal" => EnemyActionType.Heal,
        "Defend" => EnemyActionType.Defend,
        "SpecialAbility" => EnemyActionType.SpecialAbility,
        _ => throw new InvalidOperationException($"Unknown ability: {randomAbility}")
    };
}

 
    private async Task WinBattle()
    
    {   
        
        if (HeroStateService.Hero == null)
        return; // Early exit if Hero is nul
        /// calculate the experience
        int baseExperience = ExperienceProvided;
        int levelMultiplier = HeroStateService.Hero.Level > 1 ? HeroStateService.Hero.Level : 1;
        int finalExperience = baseExperience * levelMultiplier;
        HeroStateService.Hero.Exp += finalExperience;
        HeroStateService.Hero.Points += PointsProvided;
        /// update chapters 
         switch (ChapterNumber)
    {
        case "Training":
            if( HeroStateService.Hero.Wounds == 0 )
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter1":
            HeroStateService.Hero.Story1 = true;
            HeroStateService.Hero.Story01 = true;
            HeroStateService.Hero.Wounds += 1;

            break;
        case "Chapter2":
            HeroStateService.Hero.Story2 = true;
            HeroStateService.Hero.Story02 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter3":
            HeroStateService.Hero.Story3 = true;
            HeroStateService.Hero.Story03 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
        case "Chapter4":
            HeroStateService.Hero.Story4 = true;
            HeroStateService.Hero.Story04 = true;
            HeroStateService.Hero.Wounds += 1;
            break;
    }


        try
        {
            await client.UpdateHero(HeroStateService.Hero);
            HeroStateService.SetHero(HeroStateService.Hero);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Hero: {ex.Message}");
        }
    }

    private void GoHome() => NavigationManager.NavigateTo("/game");

    private void RemoveMessage(string message)
    {
        // Check if the message exists before attempting to remove it
        if (actionMessages.Contains(message))
        {
            actionMessages.Remove(message);
        }
    }

    private async Task DisplayActionMessage(string message, int delay = 2000)
    {
        actionMessages.Add(message);
        StateHasChanged();
        await Task.Delay(delay);
        actionMessages.Remove(message);
        StateHasChanged();
    }

    private enum HeroActionType
    {
        Attack,
        Defend,
        HeavyCrash,
        HerTears,
        MilkRage
    }
     private enum EnemyActionType
    {
        Attack,
        Defend,
        Heal,
        SpecialAbility,

    }

    private async Task GoHomeAndReset() 
    { 
      
    NavigationManager.NavigateTo("/game");

    // Reset enemy stats
    EnemyHp = 0;
    EnemySpeed = 0;
    EnemyArmor = 0;
    EnemyDmg = 0;
    enemyStartingHp = 0;
    IconUrl = null;
    SceneUrl = null;
    AttackUrl = null;
    StandUrl = null;
    DefendUrl = null;
    HealUrl = null;
    BoostUrl = null;
    // Reset animation states
    await AnimationService.ResetStatus();
    // Reset game state variables
    actionMessages.Clear();
    gameEnd = false;
    HasPerformed = false;
    turnCounter = 0;
    EndGameMessage = null;
    EnemyName = null;
    StateHasChanged();
    }

}