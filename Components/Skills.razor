@using BlazorDex.Models
@using BlazorDex.Util
@inject HeroClient client
@inject HeroStateService HeroStateService

@if (HeroStateService.Hero != null)
{
    <div class="grid gap-2 w-full">
        
        <div class="flex flex-col">
            <StatsSectionModular ImageSrc="image/icons/mace.png" StatName="Heavy Crash" isAbility="@true" StatValue="@HeroStateService.Hero.HeavyCrashLevel" SkillLevel="1"  Points="@HeroStateService.Hero.Points"
                ButtonClass="" OnStatChanged="HandleStatChanged" />
            <div class=" text-white p-2  shadow-md"  style="background-color: rgba(255, 255, 255, 0.1);"> 
            <div class=" flex justify-between">
                <h1 class=" text-sm  font-semibold text-text-third">Reduce Enemy Armor by: @HeroStateService.Hero.HeavyCrashDmg </h1>
                <span class=" text-sky-600 text-sm">( active )</span>
            </div>
            <p class="text-xs">Unleash a devastating mace strike that crushes enemy armor, leaving them vulnerable. Each level reduces more armor, stripping enemies of their steel defenses.</p>
            </div>
        </div>
        
        <div class="flex flex-col">
            <StatsSectionModular  isAbility="@true" ImageSrc="image/icons/tears.png" StatName="Her Tears" StatValue="@HeroStateService.Hero.TearHealLevel"  SkillLevel="1" Points="@HeroStateService.Hero.Points"
                ButtonClass="" OnStatChanged="HandleStatChanged" />
            <div class=" text-white p-2  shadow-md "  style="background-color: rgba(255, 255, 255, 0.1);">
                      <div class=" flex justify-between">
                    <h1 class=" text-sm  font-semibold text-text-third">Heal Kreshnik by: @HeroStateService.Hero.TearHealHp HP </h1>
                    <span class=" text-sky-600 text-sm">( active  )</span>
                </div>

                <p class="  text-xs">The Kreshnikâ€™s sister washes his wounds with her tears, healing his injuries. Each level increases the healing power, restoring more health.</p>
            </div>
        </div>
        
        <div class="flex flex-col">
            <StatsSectionModular ImageSrc="image/icons/nymph.png" StatName="Rage Milk" isAbility="@true" StatValue="@HeroStateService.Hero.MilkRegeLevel" SkillLevel="1" Points="@HeroStateService.Hero.Points"
                ButtonClass="" OnStatChanged="HandleStatChanged" />
            <div class=" text-white p-2 shadow-md"  style="background-color: rgba(255, 255, 255, 0.1);"> 
                       <div class=" flex justify-between">
                     <h1 class=" text-sm  font-semibold text-text-third">Each turn gain @HeroStateService.Hero.MilkRegeStats damage / armor </h1>
                     <span class=" text-green-600 text-sm">( passive )</span>
                 </div>
                 <p class=" text-xs">Empowered by the milk of the nymphs, the Kreshnik gains immense strength each turn. Each level boosts both armor and damage, turning him into an unstoppable force.</p>
            </div>
        </div>

    </div>
}
else
{
    <h1>Loading Hero stats</h1>
}

@code {
private async Task HandleStatChanged((string StatName, int Change) change)
{
    int cost;

    switch (change.StatName)
    {
        case "Heavy Crash":
        case "Her Tears":
        case "Rage Milk":
            cost = change.Change > 0 ? 5 : 0;
            break;
        default:
            cost = change.Change > 0 ? 1 : 0;
            break;
    }
    if(HeroStateService.Hero == null)
        return;

    if (HeroStateService.Hero.Points < cost && change.Change > 0)
    {
        return; // Prevent changes if not enough points are available
    }

    switch (change.StatName)
    {
        case "Heavy Crash":
            HeroStateService.Hero.HeavyCrashLevel += change.Change;
              HeroStateService.Hero.HeavyCrashDmg += 5; 
              ;
            break;
        case "Her Tears":
            HeroStateService.Hero.TearHealLevel += change.Change;
            HeroStateService.Hero.TearHealHp += 20; 
            

            break;
        case "Rage Milk":
            HeroStateService.Hero.MilkRegeLevel += change.Change;
            HeroStateService.Hero.MilkRegeStats += 3; 
            break;
    }

    if (change.Change > 0)
    {
        HeroStateService.Hero.Points -= cost;
    }
    StateHasChanged();
    try
    {
        await client.UpdateHero(HeroStateService.Hero);
        HeroStateService.SetHero(HeroStateService.Hero);
    
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error updating Hero: {ex.Message}");
    }
}

}
