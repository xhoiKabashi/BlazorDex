<audio id="healingAudio" src="audio/blessing2.ogg"></audio>
<audio id="attackingAudio" src="audio/slightscream-12.ogg"></audio>
<audio id="metal" src="audio/metalboom.ogg"></audio>
<audio id="armor" src="audio/armor.wav"></audio>
<audio id="rage" src="audio/rage.mp3"></audio>
<audio id="heavyMetal" src="audio/metal.mp3"></audio>
<audio id="monsterattack" src="audio/monster.mp3"></audio>
<audio id="nympth" src="audio/nympth.mp3"></audio>



@code{
    // Hero Parameters
    [Parameter] public bool HeavyCrash { get; set; }
    [Parameter] public bool HeroBoosting { get; set; }
    [Parameter] public bool HeroIsHealing { get; set; }
    [Parameter] public bool HeroUpgradeArmor { get; set; }
    [Parameter] public bool HeroIsAtt { get; set; }
    
    [Parameter] public bool EnemyIsHealing { get; set; }
    [Parameter] public bool EnemyIsAtt { get; set; }
    [Parameter] public bool EnemyIsBessing { get; set; }
    [Parameter] public bool EnemyUpgradeArmor { get; set; }
    [Parameter] public bool MonsterAttack { get; set; }
    [Parameter] public bool NympthAttack { get; set; }



    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;  // Mark as non-nullable

    // Audio control flags
    private bool shouldPlayAudio = false;
    private bool AudioAtt = false;
    private bool AudioDef = false;
    private bool AudioRage = false;
    private bool AudioHavyCrash = false;
    private bool MonsterAttackAudio = false;
    private bool NympthAttackAudio = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldPlayAudio)
        {
            await PlayHealingAudio();
            shouldPlayAudio = false;
        }
        if (AudioAtt)
        {
            await PlayAttAudio();
            AudioAtt = false;
        }
        if (AudioDef)
        {
            await PlayDefAudio();
            AudioDef = false;
        }
        if (AudioRage)
        {
            await PlayRageAudio();
            AudioRage = false;
        }
        if (AudioHavyCrash)
        {
            await PlayHavyCrashAudio();
            AudioHavyCrash = false;
        }
            if (MonsterAttackAudio)
        {
            await PlayMonsterAttack();
            MonsterAttackAudio = false;
        }
         if (NympthAttackAudio)
        {
            await PlayNympthAttack();
            NympthAttackAudio = false;
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (HeroIsHealing || EnemyIsHealing)
        {
            shouldPlayAudio = true;
        }
        if (HeroIsAtt || EnemyIsAtt && !MonsterAttack && !NympthAttack)
        {
            AudioAtt = true;
        }
        if (HeroUpgradeArmor || EnemyUpgradeArmor)
        {
            AudioDef = true;
        }
        if (HeroBoosting || EnemyIsBessing)
        {
            AudioRage = true;
        }
        if (HeavyCrash)
        {
            AudioHavyCrash = true;

        } if(MonsterAttack){
            MonsterAttackAudio = true;
        }
         if(NympthAttack){
            NympthAttackAudio = true;
        }

        return Task.CompletedTask;
    }


    private async Task PlayMonsterAttack()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('monsterattack').volume = 0.3;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('monsterattack').play()");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('metal').play()");
    }
       private async Task PlayNympthAttack()

    {
         Console.Write(true);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('nympth').volume = 0.3;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('nympth').play()");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('metal').play()");
    }

    private async Task PlayHealingAudio()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('healingAudio').volume = 0.3;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('healingAudio').play()");
    }

    private async Task PlayRageAudio()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('rage').volume = 0.3;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('rage').play()");
    }

    private async Task PlayHavyCrashAudio()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('heavyMetal').volume = 0.6;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('heavyMetal').play()");
    }

    private async Task PlayAttAudio()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('attackingAudio').volume = 0.3;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('attackingAudio').play()");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('metal').play()");
    }

    private async Task PlayDefAudio()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('armor').volume = 0.5;");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('armor').play()");
    }
}
