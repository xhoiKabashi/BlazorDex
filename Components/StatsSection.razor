@using BlazorDex.Models
@using BlazorDex.Util
@inject HeroClient client
@inject HeroStateService HeroStateService


@if (HeroStateService.Hero != null)
{
       <div class=" grid grid-cols-2 gap-1 uppercase  w-full ">
        <StatsSectionModular ImageSrc="image/icons/sword.png" StatName="Attack" StatValue="@HeroStateService.Hero.Dmg" Points="@HeroStateService.Hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/icons/armor.png" StatName="Armor" StatValue="@HeroStateService.Hero.Armor" Points="@HeroStateService.Hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/icons/hermes.png" StatName="Speed" StatValue="@HeroStateService.Hero.Speed" Points="@HeroStateService.Hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/icons/health.png" StatName="Hp" StatValue="@HeroStateService.Hero.Hp" Points="@HeroStateService.Hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
    </div>
}
else
{

    <h1>Loading Hero stats</h1>

}

@code {
private async Task HandleStatChanged((string StatName, int Change) change)
{   if(HeroStateService.Hero == null)
       return;
    if (HeroStateService.Hero.Points <= 0 && change.Change > 0)
    {
        return; // Prevent changes if no points are available
    }

    switch (change.StatName)
    {
        case "Attack":
            HeroStateService.Hero.Dmg += change.Change;
            break;
        case "Armor":
            HeroStateService.Hero.Armor += change.Change;
            break;
        case "Speed":
            HeroStateService.Hero.Speed += change.Change;
            break;
        case "Hp":
            HeroStateService.Hero.Hp += 25;
            break;
    }

    if (change.Change > 0)
    {
        HeroStateService.Hero.Points -= change.Change;
    }

    try
    {
        await client.UpdateHero(HeroStateService.Hero);
        HeroStateService.SetHero(HeroStateService.Hero);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error updating Hero: {ex.Message}");
    }
}

}